@page "/tickets/edit/{Id:int}"
@using CurrieTechnologies.Razor.SweetAlert2;
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService
<center>
    <h3>Control de entradas</h3>
</center>
@if (ticket is null)
{
    <p> </p>
}
else
{
    <TicketForm @ref="ticketForm" Ticket="ticket" OnValidSubmit="Edit" ReturnAction="Return" />
}

@code {
    private Ticket? ticket;
    private TicketForm? ticketForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<Ticket>($"api/tickets/{Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                var messageError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
                navigationManager.NavigateTo("tickets");
            }
            else
            {
                var messageError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            }
        }
        else
        {
            ticket = responseHTTP.Response;
        }
    }

    private async Task Edit()

    {
        ticket!.Used = true;

        var responseHTTP = await repository.Put("api/tickets", ticket);


        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            ticketForm!.FormPostedSuccessfully = true;
            navigationManager.NavigateTo("tickets");
        }
    }

    private void Return()
    {
        navigationManager.NavigateTo("tickets");
    }
}
