@using CurrieTechnologies.Razor.SweetAlert2;
@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>
<EditForm Model="Ticket" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>Datos de la boleta:</label>
        <div>
            <InputSelect class="form-control" @bind-Value="@SelectedEntrance">
                @foreach (var entrance in Entrances)
                {
                    <option value="@entrance">@entrance</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => Ticket.Entrance)" />
        </div>


    </div>

    <button class="btn btn-primary" type="submit">INGRESAR</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>
@code {
    private string SelectedEntrance { get; set; }

    private List<string> Entrances { get; } = new List<string> { "NORTE", "SUR", "ORIENTAL", "OCCIDENTAL" };


    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new(Ticket);
    }




    [EditorRequired]
    [Parameter]
    public Ticket Ticket { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }


        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}